@using Newtonsoft.Json;
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, AuthoringTagHelpers
@model IEnumerable<Product>;

@*<!-- Inner Page Breadcrumb -->
<div class="inner_page_breadcrumb">
	<div class="container">
		<div class="row">
			<div class="col-xl-6">
				<div class="breadcrumb_content">
					<h2 class="breadcrumb_title">Shop</h2>
					<ol class="breadcrumb">
						<li class="breadcrumb-item"><a href="#">Home</a></li>
						<li class="breadcrumb-item active" aria-current="page"><a href="#">Shop</a></li>
					</ol>
				</div>
			</div>
		</div>
	</div>
</div>
*@
<!-- Listing Grid View -->

<div class="container">

	<div class="row">
		<div class="col-xl-3 dn-lg">
			<div class="sidebar_listing_grid1 mb30">
				<div class="sidebar_listing_list">
					<div class="terms_condition_widget filter_sidebar pt0">
						<h4 class="title">PRODUCT CATEGORIES</h4>
						<div class="widget_list">
							<ul class="list_details">
								<li>
									<a asp-action="Index" asp-controller="Product" asp-area="Customer"> All Category </a></li>
								@foreach (var cateitem in @ViewBag.categoryList)
								{
									<li><a asp-action="Index" asp-controller="Product" asp-area="Customer" asp-route-cateId="@cateitem.CategoryId">@cateitem.CategoryName </a></li>
								}


							</ul>
						</div>
						<hr>
					</div>

					<div class="terms_condition_widget filter_sidebar">
						<h4 class="title">Filter by Price</h4>
						<div class="widget_list">
							<ul>
								<li onclick="changePrice(this)" data-price="0" data-check="ticked"><a>All Price</a></li>
								<li onclick="changePrice(this)" data-price="1" data-check=""><a>Less than :<span style="color:#86BC42;padding:2px;">   $49.99 </span></a></li>
								<li onclick="changePrice(this)" data-price="2" data-check=""><a>From :<span style="color:#86BC42;padding:2px;">   $49.99 - $99.99 </span></a></li>
								<li onclick="changePrice(this)" data-price="3" data-check=""><a>From :<span style="color:#86BC42;padding:2px;">   $100 - $199.99 </span> </a></li>
								<li onclick="changePrice(this)" data-price="4" data-check=""><a>Over :<span style="color:#86BC42;padding:2px;">   $200 </span> </a></li>
							</ul>
						</div>
						<hr>
					</div>
					<div class="terms_condition_widget filter_sidebar">
						<h4 class="title">Filter by Brand</h4>
						<div class="widget_list">
							<ul>
								<li onclick="changeBrand(this)" data-brand="0" data-check="ticked"><a>All Brand<span style="color:#86BC42;padding:2px;"></span></a></li>
								@foreach (var item in @ViewBag.brandList)
								{
									<li onclick="changeBrand(this)" data-brand="@item.BrandId" data-check=""><a><span style="color:#86BC42;padding:2px;">Brand: @item.BrandName </span></a></li>
								} 

							</ul>
						</div>
						<hr>
					</div>


				</div>
			</div>
		</div>
		<div class="col-xl-9">
			<div class="row">
				<div class="listing_filter_row dif db-767">
					<div class="col-md-4">
						<div class="left_area tac-sm mb30-767">
							<p class="heading-color fz14">Showing <span class="fwb">1–25</span> of <span class="fwb">56</span> results Showing</p>
						</div>
					</div>
					<div class="col-md-8">
						<div class="listing_list_style tac-767">
							<ul class="mb0">
								<li class="list-inline-item">
									<a id="open2" class="filter_open_btn style2 dn db-lg" href="#"><span class="flaticon-setting-lines mr10"></span> Filters</a>
								</li>
								<li class="list-inline-item">
									<div class="shop_default_listing htlw_form_select">
										<select class="custom_select_dd" id="selectbox_default_list">
											<option>Default sorting</option>
											<option value="NewestListings">Newest Listings</option>
											<option value="MostRecent">Most Recent</option>
											<option value="Recent">Recent</option>
											<option value="BestSelling">Best Selling</option>
											<option value="OldReview">Old Review</option>
										</select>
									</div>
								</li>
								<li class="list-inline-item gird"><a href="#"><span class="fa fa-th-large"></span></a></li>
								<li class="list-inline-item list"><a href="#"><span class="fa fa-th-list"></span></a></li>
							</ul>
						</div>
					</div>
				</div>
			</div>
			<div class="row" id="productContainer">
			</div>
			<div class="row">
				<div class="col-lg-12">
					<div class="mbp_pagination mt10">
						<ul class="page_navigation">
							<li class="page-item">
								<a class="page-link previous" tabindex="-1" aria-disabled="true"> <span class="fa fa-arrow-left"></span></a>
							</li>
							<span id="listPagesContainer">
				
							</span>
							<li class="page-item">
								<a class="page-link next"><span class="fa fa-arrow-right"></span></a>
							</li>

						</ul>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>


@section Scripts{
	<script>
		//itemPerPage= 12
		//currentPage=1
		//start= (currentPage-1)*itemPerPage
		//end=currentPage*itemPerPage


		$(document).ready(function() {
			var productData = @Html.Raw(JsonConvert.SerializeObject(@Model));
			 
			loaddata(productData);


		});

		//filter price

		function changePrice(picker) {

			let chosenPrice = picker.getAttribute("data-price");
			//alert(chosenPrice);
			//get brand;
            let priceTicked = $('[data-price]');
            for (let i = 0; i < priceTicked.length; i++) { priceTicked[i].setAttribute("data-check", ""); }
            //add ticked

            picker.setAttribute("data-check", "ticked");

			let brandList = $('[data-brand]');
		
			let brandId;
			for (let i = 0; i < brandList.length; i++) {

                if (brandList[i].getAttribute('data-check') == "ticked") {
					brandId=brandList[i].getAttribute('data-brand');
				};
		

			}

            //console.log(brandId);


			PData = @Html.Raw(JsonConvert.SerializeObject(@Model));

			switch (chosenPrice) {
				case "1":
					if (brandId != 0) { productData = PData.filter(p => p.Price >= 0 && p.Price < 2 && p.Brand_Category.BrandId == parseInt(brandId)); }
                    else { productData = PData.filter(p => p.Price >= 0 && p.Price < 2); }					
					break;
				case "2":
				if (brandId != 0) { productData = PData.filter(p => p.Price >= 2 && p.Price < 5 && p.Brand_Category.BrandId == parseInt(brandId)); }
                else { productData = PData.filter(p => p.Price >= 2 && p.Price < 5) ; }
					
					break;
				case "3":
				if (brandId != 0) {productData = PData.filter(p => p.Price >= 5 && p.Price < 10 && p.Brand_Category.BrandId == parseInt(brandId)); }
                    else {productData = PData.filter(p => p.Price >= 5 && p.Price < 10)  }
					
					break;
				case "4":
				if (brandId != 0) {productData = PData.filter(p => p.Price >= 10 && p.Brand_Category.BrandId == parseInt(brandId)); }
                    else {productData = PData.filter(p => p.Price >= 10) }
					
					break;
                default:
                    if (brandId != 0) { productData = PData.filter(p => p.Brand_Category.BrandId == parseInt(brandId)); }
                    else { productData = PData; }
					
			}

			loaddata(productData);
		}


		//filter brand
		function changeBrand(picker) {

			let chosenBrand = picker.getAttribute("data-brand");
			//reset ticked
            let tickedBrand = $('[data-brand]');
            for (let i = 0; i < tickedBrand.length; i++) { tickedBrand[i].setAttribute("data-check", ""); }

            picker.setAttribute("data-check", "ticked");
			//picker.setAttribute("class", "active");
		
			//get brand;
			let priceList = $('[data-price]');
		
			let price;
			for (let i = 0; i < priceList.length; i++) {

                if (priceList[i].getAttribute('data-check') == "ticked") {
					price=priceList[i].getAttribute('data-price');
				};
		

			}
            //console.log(price);


			PData = @Html.Raw(JsonConvert.SerializeObject(@Model));

			switch (price) {
				case "1":
					productData = PData.filter(p => p.Price >= 0 && p.Price < 2 && p.Brand_Category.BrandId == parseInt(chosenBrand) );
					break;
				case "2":
					productData = PData.filter(p => p.Price >= 2 && p.Price < 5 && p.Brand_Category.BrandId == parseInt(chosenBrand));
					break;
				case "3":
					productData = PData.filter(p => p.Price >= 5 && p.Price < 10 && p.Brand_Category.BrandId == parseInt(chosenBrand));
					break;
				case "4":
					productData = PData.filter(p => p.Price >= 10 && p.Brand_Category.BrandId == parseInt(chosenBrand));
					break;
                default:
                    if (chosenBrand != 0) { productData = PData.filter(p => p.Brand_Category.BrandId == parseInt(chosenBrand)); }

                    else { productData = PData; }
					
			}

			loaddata(productData);
		}
		//
		//load data js
		function loaddata(productData) {

			var product = productData;
			//console.log(product);

			var perPage = 2;
			var currentPage = 1;
			var start = 0;
			var end = perPage;
			var totalPage = Math.ceil(product.length / perPage);
         
          

			//nut nam duoi ham render
			const btnNext = document.querySelector('.next');
			const btnPrevious = document.querySelector('.previous');


			renderProduct();

			renderListPages();
			changePage();





			//      var product = productData;

			//      console.log(product);
			//      var perPage = 2;
			//      var currentPage = 1;
			//      var start = 0;
			//      var end = perPage;
			//      var totalPage = Math.ceil(product.length / perPage);



			////nut nam duoi ham render
			//const btnNext = document.querySelector('.next');
			//const btnPrevious = document.querySelector('.previous');

			//renderListPages();
			//renderProduct();
			//changePage();

			function renderProduct() {



				html = ``;
				const content = product.map((item, index) => {
					if (index >= start && index < end) {
                        console.log(item);
						let PUrl = "anh.jpg";
						let img = item.ImageProduct.find(i => i != null);
						if (img != null) { PUrl = img.Url; }

						console.log(PUrl);
						html += `<div class="col-sm-6 col-lg-4">
																			<div class="shop_item">
																				<div class="thumb">
																					<img src="/Images/${PUrl}"></img>
																					<div class="thumb_info">
																						<ul class="mb0">

																							<li><a href="page-dashboard-wish-list.html"><span class="flaticon-search"></span></a></li>

																						</ul>
																					</div>
																				</div>
																				<div class="details text-center">
																					<div class="title">${item.ProductName}</div>
																					<div class="review">
																						<ul class="mb0">
																							<li class="list-inline-item"><a href="#"><i class="fa fa-star"></i></a></li>
																							<li class="list-inline-item"><a href="#"><i class="fa fa-star"></i></a></li>
																							<li class="list-inline-item"><a href="#"><i class="fa fa-star"></i></a></li>
																							<li class="list-inline-item"><a href="#"><i class="fa fa-star"></i></a></li>
																							<li class="list-inline-item"><a href="#"><i class="fa fa-star"></i></a></li>
																						</ul>
																					</div>
																					<div class="sub_title">${item.Title}</div>
																					<div class="sub_title">${item.Brand_Category.Brand.BrandName}</div>
																					<div class="si_footer">
																						<div class="price">$ ${item.Price}</div>
																						<a href="page-shop-cart.html" class="cart_btn btn-thm"><span class="flaticon-shopping-cart mr10"></span>ADD TO CART</a>
																					</div>
																				</div>
																			</div>
																		</div>`
							;



						return html;
					}



				});
				document.getElementById("productContainer").innerHTML = html;
			}

			//renderListPages();
			//renderProduct();
			//changePage();

			////nut nam duoi ham render
			//const btnNext = document.querySelector('.next');
			//const btnPrevious = document.querySelector('.previous');
			//btn Next
			btnNext.addEventListener('click', () => {

					const numberPages = document.querySelectorAll('#listPagesContainer li');

				if (currentPage < totalPage) { currentPage++; 

				 for (let j = 0; j < numberPages.length; j++) {
					 //if(numberPages[j])			
					 numberPages[j].setAttribute("class", "page-item");
						 }
				numberPages[currentPage-1].setAttribute("class", "page-item active");

				}
				else { currentPage = totalPage; }

				getItem(currentPage);
				renderProduct();

			})
			//btnPev
			btnPrevious.addEventListener('click', () => {


				const numberPages = document.querySelectorAll('#listPagesContainer li');
				

				if (currentPage > 1) { currentPage-- ;
					//
						 for (let j = 0; j < numberPages.length; j++) {
					 //if(numberPages[j])			
					 numberPages[j].setAttribute("class", "page-item");
						 }
				numberPages[currentPage-1].setAttribute("class", "page-item active");
				}
				else { currentPage = 1; }
				getItem(currentPage);

				renderProduct();
			})

			//get item
			function getItem(currentPage) {
				start = (currentPage - 1) * perPage;
				end = currentPage * perPage;
				renderProduct();
			}

			//render number of page
			function renderListPages() {

				let listPages = '';
				listPages += `
								<li class="page-item active"><a class="page-link" >1</a></li>`;
				for (let i = 2; i <= totalPage; i++) {
					listPages += `<li class="page-item"><a class="page-link" >${i}</a></li>`;
				}




				document.getElementById('listPagesContainer').innerHTML = listPages;
			}
			//choose page
			function changePage() {
				const numberPages = document.querySelectorAll('#listPagesContainer li');

				for (let i = 0; i < numberPages.length; i++) {
					
					numberPages[i].addEventListener('click', () => {
                        for (let j = 0; j < numberPages.length; j++) { numberPages[j].setAttribute("class", "page-item");}

						currentPage = i + 1;
						getItem(currentPage);
                        numberPages[i].setAttribute("class", "page-item active");
						renderProduct();

					});

				}

			}

		}



	</script>
}
